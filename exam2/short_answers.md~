# 1.1 Vocabulary
## A:
1. `int n;` Declare integer `n`
2. `n = 0;` Set value of `n` to 0
3. `int f( void );` Declare a function named `f()` that takes no arguments and returns an integer
4. `int f( void ) { /* insert sub - routine contents here . */ }` Define the functionality of `f()` with the code contained in `{ }`

## B:
Statically typed means that once a variable or object has been declared as one type, it cannot be subsequently changed to another type.
Strongly typed means that variables are defined as a specific type, and can only perform the actions allowed by that type.
`int pi = 3.14;` compiles without error because C++ allows some implicit conversions (i.e. it can convert a `double` to an `int` by removing all digits after the decimal point).

## C:
`int a[4];`
"Statically allocated" in this context means that the array size is known at compile time.

## D:
This function adds all positive integers less than `n`.
It could be improved by initializing the value of `sum` (presumably a value of 0) or by starting the loop with `int i = 1;` since adding 0 does nothing except take extra time.

## E:
The statement on line 3 is a constructor.
It returns an `S` object with an `s` value of 42, and is used when declaring a new `S`.
